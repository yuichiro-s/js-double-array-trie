{"version":3,"file":"js-double-array-trie.es5.js","sources":["../src/double_array_trie_js_bind_bg.js","../src/double_array_trie_js_bind.js","../src/js-double-array-trie.ts"],"sourcesContent":["\nconst path = require('path').join(__dirname, 'double_array_trie_js_bind_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\nlet imports = {};\nimports['./double_array_trie_js_bind'] = require('./double_array_trie_js_bind');\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nmodule.exports = wasmInstance.exports;\n","/* tslint:disable */\nvar wasm;\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction passArray32ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 4);\n    getUint32Memory().set(arg, ptr / 4);\n    return [ptr, arg.length];\n}\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    return [ptr, arg.length];\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nfunction getArrayI32FromWasm(ptr, len) {\n    return getInt32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction freeStaticTrieInt32(ptr) {\n\n    wasm.__wbg_statictrieint32_free(ptr);\n}\n/**\n*/\nclass StaticTrieInt32 {\n\n    static __construct(ptr) {\n        return new StaticTrieInt32(ptr);\n    }\n\n    constructor(ptr) {\n        this.ptr = ptr;\n\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeStaticTrieInt32(ptr);\n    }\n    /**\n    * @param {Int32Array} arg0\n    * @param {Uint8Array} arg1\n    * @param {Int32Array} arg2\n    * @returns {StaticTrieInt32}\n    */\n    static new(arg0, arg1, arg2) {\n        const [ptr0, len0] = passArray32ToWasm(arg0);\n        const [ptr1, len1] = passArray8ToWasm(arg1);\n        const [ptr2, len2] = passArray32ToWasm(arg2);\n        try {\n            return StaticTrieInt32.__construct(wasm.statictrieint32_new(ptr0, len0, ptr1, len1, ptr2, len2));\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 4);\n            wasm.__wbindgen_free(ptr1, len1 * 1);\n            wasm.__wbindgen_free(ptr2, len2 * 4);\n\n        }\n\n    }\n    /**\n    * @param {Uint8Array} arg0\n    * @returns {number}\n    */\n    get(arg0) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        const [ptr0, len0] = passArray8ToWasm(arg0);\n        const retptr = globalArgumentPtr();\n        try {\n\n            wasm.statictrieint32_get(retptr, this.ptr, ptr0, len0);\n            const present = getUint32Memory()[retptr / 4];\n            const value = getInt32Memory()[retptr / 4 + 1];\n            return present === 0 ? undefined : value;\n\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * @param {Uint8Array} arg0\n    * @returns {Int32Array}\n    */\n    prefix_search(arg0) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        const [ptr0, len0] = passArray8ToWasm(arg0);\n        const retptr = globalArgumentPtr();\n        try {\n            wasm.statictrieint32_prefix_search(retptr, this.ptr, ptr0, len0);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getArrayI32FromWasm(rustptr, rustlen).slice();\n            wasm.__wbindgen_free(rustptr, rustlen * 4);\n            return realRet;\n\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * @returns {number}\n    */\n    n_keys() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return wasm.statictrieint32_n_keys(this.ptr);\n    }\n    /**\n    * @param {boolean} arg0\n    * @returns {Uint8Array}\n    */\n    serialize(arg0) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        const retptr = globalArgumentPtr();\n        wasm.statictrieint32_serialize(retptr, this.ptr, arg0 ? 1 : 0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {Uint8Array} arg0\n    * @param {boolean} arg1\n    * @returns {StaticTrieInt32}\n    */\n    static deserialize(arg0, arg1) {\n        const [ptr0, len0] = passArray8ToWasm(arg0);\n        try {\n            return StaticTrieInt32.__construct(wasm.statictrieint32_deserialize(ptr0, len0, arg1 ? 1 : 0));\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n}\nmodule.exports.StaticTrieInt32 = StaticTrieInt32;\n\nconst TextDecoder = require('util').TextDecoder;\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nmodule.exports.__wbindgen_throw = function(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n};\n\nwasm = require('./double_array_trie_js_bind_bg');\n","import { StaticTrieInt32 } from './double_array_trie_js_bind'\nimport { TextEncoder } from 'util'\n\nlet encoder = new TextEncoder()\n\nfunction encode(key: string): Uint8Array {\n  return encoder.encode(key)\n}\n\nexport default class Trie {\n  trie: StaticTrieInt32\n\n  constructor(trie: StaticTrieInt32) {\n    this.trie = trie\n  }\n\n  static create(keys: string[], values: Int32Array): Trie {\n    let lengths = []\n    let encodedKeys = []\n    let totalLength = 0\n    for (const key of keys) {\n      let encoded = encode(key)\n      encodedKeys.push(encoded)\n      let length = encoded.length\n      lengths.push(length)\n      totalLength += length\n    }\n\n    let keysFlatten = new Uint8Array(totalLength)\n    let offset = 0\n    for (const encoded of encodedKeys) {\n      keysFlatten.set(encoded, offset)\n      offset += encoded.length\n    }\n\n    let lengthsInt32 = new Int32Array(lengths)\n    return new Trie(StaticTrieInt32.new(lengthsInt32, keysFlatten, values))\n  }\n\n  static deserialize(data: Uint8Array, compressed: boolean): Trie {\n    let trie = StaticTrieInt32.deserialize(data, compressed)\n    return new Trie(trie)\n  }\n\n  get(key: string): number {\n    let encoded = encode(key)\n    return this.trie.get(encoded)\n  }\n\n  prefixSearch(key: string): { value: number; length: number }[] {\n    let encoded = encode(key)\n    let flattenedResult = this.trie.prefix_search(encoded)\n    let entryNum = flattenedResult.length / 2\n    let result = []\n    for (let i = 0; i < entryNum; i++) {\n      result.push({\n        value: flattenedResult[i * 2],\n        length: flattenedResult[i * 2 + 1]\n      })\n    }\n    return result\n  }\n\n  size(): number {\n    return this.trie.n_keys()\n  }\n\n  serialize(compress: boolean) {\n    return this.trie.serialize(compress)\n  }\n}\n"],"names":["path","require$$0","require$$1","require$$2","StaticTrieInt32"],"mappings":";;;;AACA,MAAMA,MAAI,GAAGC,IAAe,CAAC,IAAI,CAAC,SAAS,EAAE,mCAAmC,CAAC,CAAC;AAClF,MAAM,KAAK,GAAGC,EAAa,CAAC,YAAY,CAACF,MAAI,CAAC,CAAC;AAC/C,IAAI,OAAO,GAAG,EAAE,CAAC;AACjB,OAAO,CAAC,6BAA6B,CAAC,GAAGG,yBAAsC,CAAC;;AAEhF,MAAM,UAAU,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACjD,MAAM,YAAY,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AACnE,gCAAc,GAAG,YAAY,CAAC,OAAO,CAAC;;ACRtC;AACA,IAAI,IAAI,CAAC;;AAET,IAAI,oBAAoB,GAAG,IAAI,CAAC;AAChC,SAAS,eAAe,GAAG;IACvB,IAAI,oBAAoB,KAAK,IAAI,IAAI,oBAAoB,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QACrF,oBAAoB,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC9D;IACD,OAAO,oBAAoB,CAAC;CAC/B;;AAED,SAAS,iBAAiB,CAAC,GAAG,EAAE;IAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACnD,eAAe,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IACpC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;CAC5B;;AAED,IAAI,mBAAmB,GAAG,IAAI,CAAC;AAC/B,SAAS,cAAc,GAAG;IACtB,IAAI,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QACnF,mBAAmB,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC5D;IACD,OAAO,mBAAmB,CAAC;CAC9B;;AAED,SAAS,gBAAgB,CAAC,GAAG,EAAE;IAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACnD,cAAc,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IACnC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;CAC5B;;AAED,IAAI,uBAAuB,GAAG,IAAI,CAAC;AACnC,SAAS,iBAAiB,GAAG;IACzB,IAAI,uBAAuB,KAAK,IAAI,EAAE;QAClC,uBAAuB,GAAG,IAAI,CAAC,8BAA8B,EAAE,CAAC;KACnE;IACD,OAAO,uBAAuB,CAAC;CAClC;;AAED,IAAI,mBAAmB,GAAG,IAAI,CAAC;AAC/B,SAAS,cAAc,GAAG;IACtB,IAAI,mBAAmB,KAAK,IAAI,IAAI,mBAAmB,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QACnF,mBAAmB,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;KAC5D;IACD,OAAO,mBAAmB,CAAC;CAC9B;;AAED,SAAS,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE;IACnC,OAAO,cAAc,EAAE,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;CAC5D;;AAED,SAAS,kBAAkB,CAAC,GAAG,EAAE,GAAG,EAAE;IAClC,OAAO,cAAc,EAAE,CAAC,QAAQ,CAAC,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;CAC5D;;AAED,SAAS,mBAAmB,CAAC,GAAG,EAAE;;IAE9B,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;CACxC;;;AAGD,MAAM,eAAe,CAAC;;IAElB,OAAO,WAAW,CAAC,GAAG,EAAE;QACpB,OAAO,IAAI,eAAe,CAAC,GAAG,CAAC,CAAC;KACnC;;IAED,WAAW,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;;KAElB;;IAED,IAAI,GAAG;QACH,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QACrB,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,mBAAmB,CAAC,GAAG,CAAC,CAAC;KAC5B;;;;;;;IAOD,OAAO,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;QACzB,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC7C,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI;YACA,OAAO,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;;SAEpG,SAAS;YACN,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;;SAExC;;KAEJ;;;;;IAKD,GAAG,CAAC,IAAI,EAAE;QACN,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QACD,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,iBAAiB,EAAE,CAAC;QACnC,IAAI;;YAEA,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACvD,MAAM,OAAO,GAAG,eAAe,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAC9C,MAAM,KAAK,GAAG,cAAc,EAAE,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;YAC/C,OAAO,OAAO,KAAK,CAAC,GAAG,SAAS,GAAG,KAAK,CAAC;;;SAG5C,SAAS;YACN,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;;SAExC;;KAEJ;;;;;IAKD,aAAa,CAAC,IAAI,EAAE;QAChB,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QACD,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG,iBAAiB,EAAE,CAAC;QACnC,IAAI;YACA,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;YACjE,MAAM,GAAG,GAAG,eAAe,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAChC,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;YAEpC,MAAM,OAAO,GAAG,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;YAC9D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;YAC3C,OAAO,OAAO,CAAC;;;SAGlB,SAAS;YACN,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;;SAExC;;KAEJ;;;;IAID,MAAM,GAAG;QACL,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QACD,OAAO,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAChD;;;;;IAKD,SAAS,CAAC,IAAI,EAAE;QACZ,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;SACnD;QACD,MAAM,MAAM,GAAG,iBAAiB,EAAE,CAAC;QACnC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC/D,MAAM,GAAG,GAAG,eAAe,EAAE,CAAC;QAC9B,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAChC,MAAM,OAAO,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;QAEpC,MAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC;QAC7D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;QAC3C,OAAO,OAAO,CAAC;;KAElB;;;;;;IAMD,OAAO,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE;QAC3B,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI;YACA,OAAO,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;SAElG,SAAS;YACN,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;;SAExC;;KAEJ;CACJ;AACD,qBAA8B,GAAG,eAAe,CAAC;;AAEjD,MAAM,WAAW,GAAGF,IAAe,CAAC,WAAW,CAAC;;AAEhD,IAAI,aAAa,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC;;AAE7C,SAAS,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE;IACjC,OAAO,aAAa,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;CAC1E;;AAED,oBAA+B,GAAG,SAAS,GAAG,EAAE,GAAG,EAAE;IACjD,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;CAChD,CAAC;;AAEF,IAAI,GAAGC,4BAAyC,CAAC;;;;;;;AC7MjD,IAAI,OAAO,GAAG,IAAI,WAAW,EAAE,CAAA;AAE/B,gBAAgB,GAAW;IACzB,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;CAC3B;AAED;IAGE,cAAY,IAAqB;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;KACjB;IAEM,WAAM,GAAb,UAAc,IAAc,EAAE,MAAkB;QAC9C,IAAI,OAAO,GAAG,EAAE,CAAA;QAChB,IAAI,WAAW,GAAG,EAAE,CAAA;QACpB,IAAI,WAAW,GAAG,CAAC,CAAA;QACnB,KAAkB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI,EAAE;YAAnB,IAAM,GAAG,aAAA;YACZ,IAAI,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;YACzB,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;YACzB,IAAI,QAAM,GAAG,OAAO,CAAC,MAAM,CAAA;YAC3B,OAAO,CAAC,IAAI,CAAC,QAAM,CAAC,CAAA;YACpB,WAAW,IAAI,QAAM,CAAA;SACtB;QAED,IAAI,WAAW,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAA;QAC7C,IAAI,MAAM,GAAG,CAAC,CAAA;QACd,KAAsB,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW,EAAE;YAA9B,IAAM,OAAO,oBAAA;YAChB,WAAW,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;YAChC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAA;SACzB;QAED,IAAI,YAAY,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC,CAAA;QAC1C,OAAO,IAAI,IAAI,CAACE,iBAAe,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC,CAAA;KACxE;IAEM,gBAAW,GAAlB,UAAmB,IAAgB,EAAE,UAAmB;QACtD,IAAI,IAAI,GAAGA,iBAAe,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;QACxD,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA;KACtB;IAED,kBAAG,GAAH,UAAI,GAAW;QACb,IAAI,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;KAC9B;IAED,2BAAY,GAAZ,UAAa,GAAW;QACtB,IAAI,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;QACzB,IAAI,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;QACtD,IAAI,QAAQ,GAAG,eAAe,CAAC,MAAM,GAAG,CAAC,CAAA;QACzC,IAAI,MAAM,GAAG,EAAE,CAAA;QACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;YACjC,MAAM,CAAC,IAAI,CAAC;gBACV,KAAK,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC7B,MAAM,EAAE,eAAe,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;aACnC,CAAC,CAAA;SACH;QACD,OAAO,MAAM,CAAA;KACd;IAED,mBAAI,GAAJ;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAA;KAC1B;IAED,wBAAS,GAAT,UAAU,QAAiB;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;KACrC;IACH,WAAC;CAAA,IAAA;;;;"}