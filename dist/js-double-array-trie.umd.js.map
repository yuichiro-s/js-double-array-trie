{"version":3,"file":"js-double-array-trie.umd.js","sources":["../src/double_array_trie_js_bind_bg.js","../src/double_array_trie_js_bind.js","../src/js-double-array-trie.ts"],"sourcesContent":["\nconst path = require('path').join(__dirname, 'double_array_trie_js_bind_bg.wasm');\nconst bytes = require('fs').readFileSync(path);\nlet imports = {};\nimports['./double_array_trie_js_bind'] = require('./double_array_trie_js_bind');\n\nconst wasmModule = new WebAssembly.Module(bytes);\nconst wasmInstance = new WebAssembly.Instance(wasmModule, imports);\nmodule.exports = wasmInstance.exports;\n","/* tslint:disable */\nvar wasm;\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nfunction passArray32ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 4);\n    getUint32Memory().set(arg, ptr / 4);\n    return [ptr, arg.length];\n}\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    return [ptr, arg.length];\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetInt32Memory = null;\nfunction getInt32Memory() {\n    if (cachegetInt32Memory === null || cachegetInt32Memory.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory;\n}\n\nfunction getArrayI32FromWasm(ptr, len) {\n    return getInt32Memory().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n    return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction freeStaticTrieInt32(ptr) {\n\n    wasm.__wbg_statictrieint32_free(ptr);\n}\n/**\n*/\nclass StaticTrieInt32 {\n\n    static __construct(ptr) {\n        return new StaticTrieInt32(ptr);\n    }\n\n    constructor(ptr) {\n        this.ptr = ptr;\n\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeStaticTrieInt32(ptr);\n    }\n    /**\n    * @param {Int32Array} arg0\n    * @param {Uint8Array} arg1\n    * @param {Int32Array} arg2\n    * @returns {StaticTrieInt32}\n    */\n    static new(arg0, arg1, arg2) {\n        const [ptr0, len0] = passArray32ToWasm(arg0);\n        const [ptr1, len1] = passArray8ToWasm(arg1);\n        const [ptr2, len2] = passArray32ToWasm(arg2);\n        try {\n            return StaticTrieInt32.__construct(wasm.statictrieint32_new(ptr0, len0, ptr1, len1, ptr2, len2));\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 4);\n            wasm.__wbindgen_free(ptr1, len1 * 1);\n            wasm.__wbindgen_free(ptr2, len2 * 4);\n\n        }\n\n    }\n    /**\n    * @param {Uint8Array} arg0\n    * @returns {number}\n    */\n    get(arg0) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        const [ptr0, len0] = passArray8ToWasm(arg0);\n        const retptr = globalArgumentPtr();\n        try {\n\n            wasm.statictrieint32_get(retptr, this.ptr, ptr0, len0);\n            const present = getUint32Memory()[retptr / 4];\n            const value = getInt32Memory()[retptr / 4 + 1];\n            return present === 0 ? undefined : value;\n\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * @param {Uint8Array} arg0\n    * @returns {Int32Array}\n    */\n    prefix_search(arg0) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        const [ptr0, len0] = passArray8ToWasm(arg0);\n        const retptr = globalArgumentPtr();\n        try {\n            wasm.statictrieint32_prefix_search(retptr, this.ptr, ptr0, len0);\n            const mem = getUint32Memory();\n            const rustptr = mem[retptr / 4];\n            const rustlen = mem[retptr / 4 + 1];\n\n            const realRet = getArrayI32FromWasm(rustptr, rustlen).slice();\n            wasm.__wbindgen_free(rustptr, rustlen * 4);\n            return realRet;\n\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n    /**\n    * @returns {number}\n    */\n    n_keys() {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        return wasm.statictrieint32_n_keys(this.ptr);\n    }\n    /**\n    * @param {boolean} arg0\n    * @returns {Uint8Array}\n    */\n    serialize(arg0) {\n        if (this.ptr === 0) {\n            throw new Error('Attempt to use a moved value');\n        }\n        const retptr = globalArgumentPtr();\n        wasm.statictrieint32_serialize(retptr, this.ptr, arg0 ? 1 : 0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @param {Uint8Array} arg0\n    * @param {boolean} arg1\n    * @returns {StaticTrieInt32}\n    */\n    static deserialize(arg0, arg1) {\n        const [ptr0, len0] = passArray8ToWasm(arg0);\n        try {\n            return StaticTrieInt32.__construct(wasm.statictrieint32_deserialize(ptr0, len0, arg1 ? 1 : 0));\n\n        } finally {\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n\n        }\n\n    }\n}\nmodule.exports.StaticTrieInt32 = StaticTrieInt32;\n\nconst TextDecoder = require('util').TextDecoder;\n\nlet cachedDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nmodule.exports.__wbindgen_throw = function(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n};\n\nwasm = require('./double_array_trie_js_bind_bg');\n","import { StaticTrieInt32 } from './double_array_trie_js_bind'\nimport { TextEncoder } from 'util'\n\nlet encoder = new TextEncoder()\n\nfunction encode(key: string): Uint8Array {\n  return encoder.encode(key)\n}\n\nexport default class Trie {\n  trie: StaticTrieInt32\n\n  constructor(trie: StaticTrieInt32) {\n    this.trie = trie\n  }\n\n  static create(keys: string[], values: Int32Array): Trie {\n    let lengths = []\n    let encodedKeys = []\n    let totalLength = 0\n    for (const key of keys) {\n      let encoded = encode(key)\n      encodedKeys.push(encoded)\n      let length = encoded.length\n      lengths.push(length)\n      totalLength += length\n    }\n\n    let keysFlatten = new Uint8Array(totalLength)\n    let offset = 0\n    for (const encoded of encodedKeys) {\n      keysFlatten.set(encoded, offset)\n      offset += encoded.length\n    }\n\n    let lengthsInt32 = new Int32Array(lengths)\n    return new Trie(StaticTrieInt32.new(lengthsInt32, keysFlatten, values))\n  }\n\n  static deserialize(data: Uint8Array, compressed: boolean): Trie {\n    let trie = StaticTrieInt32.deserialize(data, compressed)\n    return new Trie(trie)\n  }\n\n  get(key: string): number {\n    let encoded = encode(key)\n    return this.trie.get(encoded)\n  }\n\n  prefixSearch(key: string): { value: number; length: number }[] {\n    let encoded = encode(key)\n    let flattenedResult = this.trie.prefix_search(encoded)\n    let entryNum = flattenedResult.length / 2\n    let result = []\n    for (let i = 0; i < entryNum; i++) {\n      result.push({\n        value: flattenedResult[i * 2],\n        length: flattenedResult[i * 2 + 1]\n      })\n    }\n    return result\n  }\n\n  size(): number {\n    return this.trie.n_keys()\n  }\n\n  serialize(compress: boolean) {\n    return this.trie.serialize(compress)\n  }\n}\n"],"names":["path","require$$0","require$$1","require$$2","TextEncoder","StaticTrieInt32"],"mappings":"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"}